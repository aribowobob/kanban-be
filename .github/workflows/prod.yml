name: Production Deployment

on:
  push:
    tags:
      - "v*"

env:
  DOCKER_IMAGE: aribowobob/kanban-be
  DROPLET_IP: ${{ vars.DROPLET_IP }}

jobs:
  check-secrets:
    name: Check Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Check Docker Credentials
        id: check-secrets
        run: |
          echo "Checking required secrets..."

          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "::error::DOCKER_USERNAME secret is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "::error::DOCKER_PASSWORD secret is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ vars.DROPLET_IP }}" ]; then
            echo "::error::DROPLET_IP variable is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ secrets.DROPLET_PASSWORD }}" ]; then
            echo "::error::DROPLET_PASSWORD secret is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "::error::DATABASE_URL secret is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "::error::JWT_SECRET secret is not set. Please add it in repository settings."
            exit 1
          fi

          echo "All required secrets are available."

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: check-secrets
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    name: Deploy to Digital Ocean
    needs: [check-secrets, build-and-push]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Setup SSH Configuration
        run: |
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "    ConnectTimeout 30" >> ~/.ssh/config
          echo "    ServerAliveInterval 60" >> ~/.ssh/config
          echo "    ServerAliveCountMax 3" >> ~/.ssh/config
          echo "    TCPKeepAlive yes" >> ~/.ssh/config
          echo "    Compression yes" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Test SSH Connection
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD
          echo "Testing SSH connection to droplet..."
          for i in {1..3}; do
            if sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'SSH connection successful!'"; then
              echo "SSH connection established on attempt $i"
              break
            else
              echo "SSH connection attempt $i failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "SSH connection failed after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Create Deployment Directory
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "mkdir -p /opt/kanban-app"

      - name: Copy Application Files
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD
          sshpass -e scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no docker-compose.yml root@${{ env.DROPLET_IP }}:/opt/kanban-app/
          sshpass -e scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no -r migrations root@${{ env.DROPLET_IP }}:/opt/kanban-app/ || echo "No migrations directory"

      - name: Create Environment File
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "cat > /opt/kanban-app/.env << 'EOF'
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          FRONTEND_URLS=${{ vars.FRONTEND_URLS || 'http://localhost:3000' }}
          ENVIRONMENT=production
          PORT=8080
          RUST_LOG=info
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME || '' }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY || '' }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET || '' }}
          EOF"

      - name: Pull Latest Images and Deploy
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "
            cd /opt/kanban-app &&
            docker-compose pull &&
            docker-compose down &&
            docker-compose up -d &&
            docker system prune -f
          "

      - name: Wait for Service Startup
        run: |
          echo "Waiting for service to start..."
          sleep 30

      - name: Verify Deployment
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD

          # Check container status
          echo "Checking container status:"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "docker-compose -f /opt/kanban-app/docker-compose.yml ps"

          # Check container logs
          echo "Checking container logs (last 20 lines):"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "docker-compose -f /opt/kanban-app/docker-compose.yml logs --tail 20 kanban-api"

          # Health check with retry
          echo "Performing health check:"
          for i in {1..5}; do
            if curl -sSf --connect-timeout 10 --max-time 30 http://${{ env.DROPLET_IP }}:80/health; then
              echo "Health check passed on attempt $i"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts"
                exit 1
              fi
            fi
          done

          echo "Deployment verification completed successfully!"

      - name: Cleanup Old Images
        if: always()
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "
            docker image prune -af --filter 'until=72h' || true
          "
